[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ar-agent"
version = "1.0.0"
description = "3M-AR-Agent: Medical Multimodal Augmented Reality Agent based on LLaVA-NeXT-Med"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "AR-Agent Team", email = "contact@ar-agent.dev"}
]
maintainers = [
    {name = "AR-Agent Team", email = "contact@ar-agent.dev"}
]
keywords = [
    "medical",
    "augmented-reality",
    "computer-vision",
    "machine-learning",
    "llava",
    "multimodal",
    "healthcare",
    "ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Multimedia :: Graphics :: 3D Rendering",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

# Core dependencies
dependencies = [
    # Core ML/AI libraries
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "transformers>=4.35.0",
    "accelerate>=0.20.0",
    "peft>=0.4.0",
    "bitsandbytes>=0.41.0",
    "sentencepiece>=0.1.99",
    "protobuf>=3.20.0",
    
    # Computer Vision
    "opencv-python>=4.8.0",
    "Pillow>=9.5.0",
    "scikit-image>=0.20.0",
    "imageio>=2.28.0",
    
    # Scientific Computing
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    
    # Web Framework
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "werkzeug>=2.3.0",
    "jinja2>=3.1.0",
    
    # Data Processing
    "requests>=2.31.0",
    "tqdm>=4.65.0",
    "psutil>=5.9.0",
    "pyyaml>=6.0",
    "jsonschema>=4.17.0",
    
    # Medical Image Processing
    "pydicom>=2.4.0",
    "nibabel>=5.1.0",
    "SimpleITK>=2.2.0",
    
    # AR/3D Visualization
    "open3d>=0.17.0",
    "vtk>=9.2.0",
    "trimesh>=3.21.0",
    
    # Gradio for UI
    "gradio>=3.40.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.4.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0"
]

# Optional dependencies
[project.optional-dependencies]
# Training dependencies
training = [
    "deepspeed>=0.10.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    "datasets>=2.14.0",
    "evaluate>=0.4.0",
    "lightning>=2.0.0"
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0"
]

# Production dependencies
production = [
    "gunicorn>=21.2.0",
    "redis>=4.6.0",
    "celery>=5.3.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.29.0"
]

# Database dependencies
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.4.0"
]

# Cloud dependencies
cloud = [
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.17.0"
]

# All optional dependencies
all = [
    "ar-agent[training]",
    "ar-agent[dev]",
    "ar-agent[production]",
    "ar-agent[database]",
    "ar-agent[cloud]"
]

[project.urls]
Homepage = "https://github.com/dafei2017/AR-Agent"
Repository = "https://github.com/dafei2017/AR-Agent"
Documentation = "https://ar-agent.readthedocs.io"
"Bug Tracker" = "https://github.com/dafei2017/AR-Agent/issues"
Changelog = "https://github.com/dafei2017/AR-Agent/blob/main/CHANGELOG.md"

[project.scripts]
ar-agent = "ar_agent.cli:main"
ar-agent-server = "ar_agent.app:run_server"
ar-agent-train = "ar_agent.training.train:main"
ar-agent-eval = "ar_agent.evaluation.evaluate:main"

[tool.setuptools]
package-dir = {"": "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
ar_agent = [
    "configs/*.yaml",
    "templates/*.html",
    "static/**/*",
    "data/examples/*"
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "open3d.*",
    "vtk.*",
    "trimesh.*",
    "pydicom.*",
    "nibabel.*",
    "SimpleITK.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "model: marks tests that require model loading"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv"
]
max-complexity = 10

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# Documentation configuration
[tool.sphinx]
source-dir = "docs/source"
build-dir = "docs/build"
all_files = 1

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"}
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    }
]